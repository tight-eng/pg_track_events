name: Build and Release Agent

on:
  release:
    types: [published]

jobs:
  build-agent-binaries:
    name: Build Cross-Platform Agent Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd agent
          EXTENSION=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            EXTENSION=".exe"
          fi
          go build -o "pg_track_events-agent-${{ matrix.goos }}-${{ matrix.goarch }}${EXTENSION}" .

      - name: Upload binary to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pg_track_events-agent-${{ matrix.goos }}-${{ matrix.goarch }}
          path: agent/pg_track_events-agent-${{ matrix.goos }}-${{ matrix.goarch }}*
          if-no-files-found: error

  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
          check-latest: true

      - name: Install Task
        uses: arduino/setup-task@v1

      - name: Build and publish CLI
        run: task publish-cli

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-artifacts
          path: cli/dist/**
          if-no-files-found: error

  upload-to-release:
    name: Upload Binaries to Release
    needs: [build-agent-binaries, build-cli]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-agent-docker:
    name: Build and Push Agent Docker Image
    runs-on: ubuntu-latest
    needs: [build-agent-binaries]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download linux/amd64 agent binary
        uses: actions/download-artifact@v4
        with:
          name: pg_track_events-agent-linux-amd64
          path: ./agent/bin/amd64/

      - name: Download linux/arm64 agent binary
        uses: actions/download-artifact@v4
        with:
          name: pg_track_events-agent-linux-arm64
          path: ./agent/bin/arm64/

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./agent
          file: ./agent/Dockerfile.release
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}/agent:latest
            ghcr.io/${{ github.repository }}/agent:${{ steps.tag.outputs.VERSION }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.tag.outputs.VERSION }}
